<%
-- Copyright (c) 2014 Chimera Software, LLC
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
-- (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, 
-- publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
-- subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
-- FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 %>
<%
PLURAL_NAME = pluralName(this.name);
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"..string.upper(this.name).."BASE".."_";
CAP_NAME = capitalizedString(this.name);
INTERFACE = "I"..capitalizedString(this.namespace);
FULL_NAME_CAMEL = capitalizedString(this.namespace).."_"..capitalizedString(this.name).."Base";
%>
//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;

public class <%= FULL_NAME_CAMEL %> : <%=INTERFACE%> {

	public object parent;
	public string xmlns;
	
	// XML Attributes
<%
for k,v in pairs(this.attributes) do
	gaxb_print("\tpublic "..typeForItem(v).." "..v.name..";\n")
	gaxb_print("\tpublic bool "..v.name.."Exists;\n\n")
end
if (this.mixedContent == true) then
	gaxb_print("\tpublic string mixedContent;\n\tpublic bool mixedContentExists;\n\n");
end
%>

<%
if (# this.sequences > 0) then
	gaxb_print("\n\t// XML Sequences\n")
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
			gaxb_print("\tpublic List<object> children = new List<object>();\n")
		elseif(isPlural(v)) then
			gaxb_print("\tpublic List<object> "..pluralName(v.name).." = new List<object>();\n")
		else
			if(isObject(v)) then
				gaxb_print("\tpublic "..typeNameForItem(v).." "..v.name..";\n")
			else
				gaxb_print("\tpublic "..typeForItem(v).." "..v.name..";\n")
			end
			gaxb_print("\tpublic bool "..v.name.."Exists;\n")
		end
		gaxb_print("\t\n")
	end
end
%>

	public void gaxb_load(XmlReader reader, object _parent)
	{
		parent = _parent;
		if(_parent != null)
		{
			List<object> parentChildren = (List<object>)(_parent.GetType().GetField("<%= PLURAL_NAME %>").GetValue(_parent));
			if(parentChildren == null)
			{
				parentChildren = (List<object>)(_parent.GetType().GetField("children").GetValue(_parent));
			}
			if(parentChildren != null)
			{
				parentChildren.Add(this);
			}
		}
		
		xmlns = reader.GetAttribute("xmlns");
		
<%
		if (# this.attributes > 0) then
			gaxb_print("\n\t\tstring attr;\n")
		end
		for k,v in pairs(this.attributes) do
			gaxb_print("\t\tattr = reader.GetAttribute(\""..v.name.."\");\n")
			if (v.default ~= nil) then
				gaxb_print("\t\tif(attr == null) { attr = \""..v.default.."\"; }\n")
			end
			
			if (typeNameForItem(v)=="bool") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = bool.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="float") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = float.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="short") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = short.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="int") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = int.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="long") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = long.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="double") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = double.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="char") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = char.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="DateTime") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = DateTime.Parse(attr); "..v.name.."Exists = true; } \n")
			elseif (typeNameForItem(v)=="byte[]") then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = Convert.FromBase64String(attr); "..v.name.."Exists = true; } \n")
			elseif (isEnumForItem(v)) then
				gaxb_print("\t\tif(attr != null) { "..v.name.." = ("..typeForItem(v)..")System.Enum.Parse(typeof("..typeForItem(v).."), attr); "..v.name.."Exists = true; } \n")
			else
				gaxb_print("\t\tif(attr != null) { "..v.name.." = attr; "..v.name.."Exists = true; } \n")
			end
			
			gaxb_print("\t\t\n")
		end
		%>
	}
	
	public void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>");
		}
		
		sb.AppendFormat ("<{0}", "<%=this.name%>");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\\"{1}\\"", "xmlns", xmlns);
		}
		
<%
		for k,v in pairs(this.attributes) do
			if (typeNameForItem(v)=="bool") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'.ToString().ToLower()); }\n')
			elseif (typeNameForItem(v)=="float") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="short") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="int") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="long") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="double") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="char") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="DateTime") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			elseif (typeNameForItem(v)=="byte[]") then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", Convert.ToBase64String('..v.name..')); }\n')
			elseif (isEnumForItem(v)) then
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", (int)'..v.name..'); }\n')
			else
				gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat (" {0}=\\"{1}\\"", "'..v.name..'", '..v.name..'); }\n')
			end
		end
%>

<%
		if (# this.sequences > 0) then
			gaxb_print('\t\tsb.AppendFormat (">");\n')
			for k,v in pairs(this.sequences) do
				if (v.name == "any") then
					gaxb_print('\t\tforeach(object o in children) { if(o is '..INTERFACE..') { (('..INTERFACE..')o).gaxb_appendXML(sb); } else { sb.AppendFormat ("<{0}>{1}</{0}>", "'..v.name..'", o); } }\n');
				elseif(isPlural(v)) then
					gaxb_print('\t\tforeach(object o in '..pluralName(v.name)..') { if(o is '..INTERFACE..') { (('..INTERFACE..')o).gaxb_appendXML(sb); } else { sb.AppendFormat ("<{0}>{1}</{0}>", "'..v.name..'", o); } }\n');
				else
					if(isObject(v)) then
						gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat ("<{0}>{1}</{0}>", "'..v.name..'", '..v.name..'); }\n')
					else
						gaxb_print('\t\tif('..v.name..'Exists) { sb.AppendFormat ("<{0}>{1}</{0}>", "'..v.name..'", '..v.name..'); }\n')
					end
				end
				gaxb_print("\t\n")
			end
			
			gaxb_print('\t\tsb.AppendFormat ("</{0}>", "'..this.name..'");')
			
		else
			gaxb_print('\t\tsb.AppendFormat (" />");')
		end
%>

	}
}
